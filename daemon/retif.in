#!/bin/bash
#
#   /etc/init.d/retif
#
# ReTiF Daemon Startup Script
#
# chkconfig: 2345 20 80
#
# description: Manages the execution of the ReTiF Daemon, which enables
# simplified access from userspace to real-time features of the OS.
#
# processname: retifd
#
# pidfile: /run/retifd.pid

### BEGIN INIT INFO
# Provides:             retif
# Required-Start:       2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    ReTiF Daemon
# Description:          Manages the execution of the ReTiF Daemon, which enables simplified access from userspace to real-time features of the OS.
### END INIT INFO

function start() {
    if [ -f "$lockfile" ]; then
        # Assumes service is already running
        # TODO: check this assumption
        RETVAL=0
        return $RETVAL
    fi

    touch "$lockfile"

    case "$distro" in
    redhat)
        daemon \
            --check '???' \
            --user "$theuser" \
            --base "$daemon_name"
            --pidfile "$pidfile" \
            "$daemon_path" \
            # daemon args here

        RETVAL=$?
        if [ "$RETVAL" = 0 ]; then
            success

            # TODO: should I create the pidfile here?
        else
            failure
        fi
        ;;
    debian)
        start-stop-daemon --start --oknodo \
            --user "$theuser" \
            --name "$daemon_name" \
            --pidfile "$daemon_pidfile" \
            --make-pidfile \
            --background \
            --startas /bin/bash \
            --chuid "$theuser" \
            -- -c "exec '$daemon_path' ${daemon_args[@]} >'$daemon_logfile' 2>&1"

        # TODO: implement the sd_notify() call in retifd, then add this flag
        # --notify-await \

        RETVAL=$?
        ;;
    esac

    if [ $RETVAL != 0 ]; then
        rm -f "$lockfile"
    fi

    return $RETVAL
}

function stop() {
    case "$distro" in
    redhat)
        killproc \
            -p "$pidfile" \
            -b "$daemon_path" \
            "$daemon_name" \
            -INT

        # -d <delay> \

        RETVAL=$?
        if [ "$RETVAL" = 0 ]; then
            success
            # TODO: should I remove the pidfile here?
        else
            failure
        fi
        ;;
    debian)
        start-stop-daemon --stop --oknodo \
            --user "$theuser" \
            --name "$daemon_name" \
            --pidfile "$daemon_pidfile" \
            --remove-pidfile \
            --signal INT \
            --retry 1
        RETVAL=$?
        ;;
    esac

    if [ "$RETVAL" = 0 ]; then
        rm -f "$lockfile"
    fi

    return $RETVAL
}

function restart() {
    stop && start
}

function status() {
    case "$distro" in
    redhat)
        # TODO: implement this
        ;;
    debian)
        start-stop-daemon --status \
            --user "$theuser" \
            --name "$daemon_name" \
            --pidfile "$daemon_pidfile"
        RETVAL=$?
        ;;
    esac
}

(
    RETVAL=1
    distro=
    theuser=root
    daemon_name=retifd
    daemon_path="@RETIF_DAEMON_PATH@/$daemon_name"
    daemon_args=()
    daemon_logfile="/var/log/$daemon_name.log"
    daemon_pidfile="/run/$daemon_name.pid"

    if [ -f /etc/rc.d/init.d/functions ]; then
        # RedHat-based distro
        distro=redhat

        # Source the function library for init scripts on redhat systems
        . /etc/init.d/functions

    elif command -v start-stop-daemon &>/dev/null; then
        # Debian-based distro
        distro=debian
    else
        printf 'Unsupported distro!\n' >&2
        exit $RETVAL
    fi

    lockfile=

    case "$distro" in
    redhat)
        lockfile="/var/lock/subsys/$daemon_name"
        ;;
    debian)
        lockfile="/var/lock/$daemon_name"
        ;;
    esac

    # First argument is the command to run
    case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    '')
        printf 'Usage: %s {start|stop|restart|status}\n' "$0" >&2
        RETVAL=2
        ;;
    *)
        printf 'Error: unsupported command %s.\n' "$1" >&2
        printf 'Usage: %s {start|stop|restart|status}\n' "$0" >&2
        RETVAL=2
        ;;
    esac

    exit $RETVAL
)
